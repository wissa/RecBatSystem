import sys
import os
import csv
import time
import re
import threading
import serial
import serial.tools.list_ports
from datetime import datetime

import tkinter as tk
from tkinter import ttk, filedialog, messagebox

import matplotlib
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

matplotlib.use("TkAgg")

# ----------------------------
# Optional: A dictionary for fault bits if you have “Faults Reg”
# from the old code. Adjust or remove if not needed.
FAULT_BITS = {
    0: "Over Voltage",
    1: "Under Voltage",
    2: "Over Current",
    3: "Over Temperature",
    4: "Communication Error",
    5: "Balance Failure",
    6: "Protection Triggered",
    7: "Unknown Fault"
}

# ----------------------------
# Background Thread for Serial
# ----------------------------
class SerialThread(threading.Thread):
    """
    Continuously read data from serial,
    parse lines like: "Data from slave 0x01: Voltage: 3.40 V, Current: 0.00 A, ..."
    and notify the main app (via a callback).
    Also tracks last-seen time for each slave (for timeouts).
    """
    def __init__(self, port, baud, app, timeout=1.0):
        super().__init__()
        self.port = port
        self.baud = baud
        self.app = app  # reference to the main BmsApplication instance
        self.running = True
        self.buffer = ""
        self.current_slave = None
        self.temp_data = {}

        # Track last-seen times: { slave_addr: time.time() }
        self.slave_last_seen = {}

        try:
            self.ser = serial.Serial(port, baud, timeout=timeout)
        except serial.SerialException as e:
            messagebox.showerror("Serial Error", f"Could not open {port}.\n{str(e)}")
            self.ser = None
            self.running = False

    def run(self):
        if not self.ser:
            return

        while self.running:
            try:
                if self.ser.in_waiting > 0:
                    data = self.ser.read(self.ser.in_waiting).decode('utf-8', errors='ignore')
                    self.buffer += data
                    while "\n" in self.buffer:
                        line, self.buffer = self.buffer.split("\n", 1)
                        line = line.strip()
                        self.process_line(line)
                time.sleep(0.1)
            except serial.SerialException as e:
                self.app.report_fault(f"Serial Error: {e}")
                break
            except Exception as ex:
                self.app.report_fault(f"Thread Error: {ex}")
                break

        if self.ser and self.ser.is_open:
            self.ser.close()

    def stop(self):
        self.running = False

    def send_command(self, cmd):
        """Send a text command + newline."""
        if self.ser and self.ser.is_open:
            try:
                self.ser.write((cmd + "\n").encode('utf-8'))
            except serial.SerialException as e:
                self.app.report_fault(f"Serial Write Error: {e}")

    def process_line(self, line):
        """
        Example lines:
          "Data from slave 0x01: Voltage: 3.40 V, Current: 0.00 A, ..."
        We'll parse them and, when a full dataset is found, call self.app.receive_data().
        """
        if not line:
            return

        if line.startswith("Data from slave"):
            # e.g. "Data from slave 0x01: Voltage: 3.4 V, Current: 0.0 A"
            match = re.match(r"Data from slave (0x[0-9A-Fa-f]{2}):?(.*)", line)
            if match:
                addr = match.group(1).strip()
                extra = match.group(2).strip()
                self.current_slave = addr
                self.temp_data = {"address": addr}
                if extra:
                    self.parse_measurements(extra)
            return

        if self.current_slave:
            # If we see a line of dashes, consider data done
            if re.match(r"-+", line):
                self.finalize_current_slave()
                return
            self.parse_measurements(line)

            # If we have enough fields, finalize
            needed = ["Voltage","Current","SoC","Temp","Faults Reg","Vcc","Balance Current","Terminal Voltage"]
            if all(k in self.temp_data for k in needed):
                self.finalize_current_slave()
        else:
            # unrecognized line
            pass

    def parse_measurements(self, text):
        parts = text.split(",")
        for p in parts:
            if ": " in p:
                key, val = p.split(": ", 1)
                key = key.strip()
                val = val.strip()
                self.temp_data[key] = val

    def finalize_current_slave(self):
        if self.current_slave and self.temp_data:
            self.slave_last_seen[self.current_slave] = time.time()
            # Pass data to the main app
            self.app.receive_data(self.temp_data)
        self.current_slave = None
        self.temp_data = {}

# ----------------------------
# The Main GUI
# ----------------------------
class BmsApplication(tk.Tk):
    def __init__(self):
        super().__init__()

        # -------------------------------
        #   Main Window Title & Size
        # -------------------------------
        self.title("Multi-Battery System Data Control - 2025 (V1)")
        self.geometry("1200x700")  # Starting size; user can still resize/maximize.

        # -------------------------------
        #   Global Font Adjustments
        # -------------------------------
        style = ttk.Style(self)
        style.configure("Bold.TLabel", font=("TkDefaultFont", 11, "bold"))
        style.configure("Bold.TLabelframe.Label", font=("TkDefaultFont", 11, "bold"))
        self.option_add("*Font", ("TkDefaultFont", 11))

        # -------------------------------
        #   Grid Configuration (4 rows)
        # -------------------------------
        self.columnconfigure(0, weight=1)
        for r in range(4):
            self.rowconfigure(r, weight=0)
        # row=2 for the plot to expand
        self.rowconfigure(2, weight=1)

        # --------------------------------
        # Data Structures / State
        # --------------------------------
        self.serial_thread = None
        self.connected = False

        # For real-time data
        self.graph_data = {}  # { "0x01": { "time": [...], "Voltage": [...], ...} }
        self.start_time = None
        self.recording = False
        self.csv_file_path = None
        # store { address: file_obj } for CSV
        self.csv_files = {}
        self.csv_writers = {}

        # For timeouts, e.g. 15s => 15000ms from your old code
        self.slave_timeout_s = 15

        # 1) top (row=0)
        self._create_top_section()
        # 2) spacer row=1 (optional)
        # 3) plot (row=2)
        self._create_plot_section()
        # 4) bottom (row=3)
        self._create_bottom_section()

        # Start periodic update
        self._update_plot()
        # Start checking timeouts
        self.after(1000, self.check_slave_timeout)

    # -----------------------------------------------------
    #   TOP SECTION
    # -----------------------------------------------------
    def _create_top_section(self):
        top_frame = ttk.Frame(self)
        top_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=5)

        # Title label
        title_label = ttk.Label(
            top_frame,
            text="Multi-Battery System Data Control",
            style="Bold.TLabel"
        )
        title_label.pack(side=tk.TOP, pady=(0, 5))

        # Now a sub-frame that holds the four labeled frames horizontally
        top_subframe = ttk.Frame(top_frame)
        top_subframe.pack(fill=tk.X, expand=True)

        top_subframe.columnconfigure(0, weight=0)
        top_subframe.columnconfigure(1, weight=0)
        top_subframe.columnconfigure(2, weight=0)
        top_subframe.columnconfigure(3, weight=1)

        # Master Settings
        self.master_settings_frame = ttk.Labelframe(top_subframe, text="Master Settings", style="Bold.TLabelframe")
        self.master_settings_frame.grid(row=0, column=0, padx=5, pady=5, sticky="n")
        self._create_master_settings(self.master_settings_frame)

        # Slave List
        self.slave_list_frame = ttk.Labelframe(top_subframe, text="Slave List", style="Bold.TLabelframe")
        self.slave_list_frame.grid(row=0, column=1, padx=5, pady=5, sticky="n")
        self._create_slave_list(self.slave_list_frame)

        # Battery & Protection
        self.battery_frame = ttk.Labelframe(top_subframe, text="Battery & Protection", style="Bold.TLabelframe")
        self.battery_frame.grid(row=0, column=2, padx=5, pady=5, sticky="n")
        self._create_battery_protection_settings(self.battery_frame)

        # Switching Pattern
        self.switching_frame = ttk.Labelframe(top_subframe, text="Switching Pattern", style="Bold.TLabelframe")
        self.switching_frame.grid(row=0, column=3, padx=5, pady=5, sticky="nsew")
        self._create_switching_pattern_section(self.switching_frame)

    def _create_master_settings(self, parent):
        # COM Port
        ttk.Label(parent, text="COM Port:").grid(row=0, column=0, sticky=tk.W, padx=2, pady=2)
        self.com_port_var = tk.StringVar()
        self.com_port_dropdown = ttk.Combobox(parent, textvariable=self.com_port_var)
        self.com_port_dropdown.grid(row=0, column=1, sticky=tk.W, padx=2, pady=2)

        # Populate with active ports
        port_list = [p.device for p in serial.tools.list_ports.comports()]
        self.com_port_dropdown["values"] = port_list
        if port_list:
            self.com_port_dropdown.current(0)

        ttk.Label(parent, text="Baud Rate:").grid(row=1, column=0, sticky=tk.W, padx=2, pady=2)
        self.baud_rate_var = tk.StringVar(value="115200")
        self.baud_rate_dropdown = ttk.Combobox(
            parent,
            textvariable=self.baud_rate_var,
            values=["4800","9600","19200","38400","57600","115200","230400"]
        )
        self.baud_rate_dropdown.grid(row=1, column=1, sticky=tk.W, padx=2, pady=2)

        ttk.Label(parent, text="Data Intv (ms):").grid(row=2, column=0, sticky=tk.W, padx=2, pady=2)
        self.data_interval_var = tk.StringVar(value="1000")
        ttk.Entry(parent, textvariable=self.data_interval_var).grid(row=2, column=1, sticky=tk.W, padx=2, pady=2)

        ttk.Label(parent, text="Slave TO (ms):").grid(row=3, column=0, sticky=tk.W, padx=2, pady=2)
        self.slave_timeout_var = tk.StringVar(value="500")
        ttk.Entry(parent, textvariable=self.slave_timeout_var).grid(row=3, column=1, sticky=tk.W, padx=2, pady=2)

        ttk.Label(parent, text="Addr. (ms):").grid(row=4, column=0, sticky=tk.W, padx=2, pady=2)
        self.address_assign_var = tk.StringVar(value="100")
        ttk.Entry(parent, textvariable=self.address_assign_var).grid(row=4, column=1, sticky=tk.W, padx=2, pady=2)

        # Connect & Disconnect
        button_frame = ttk.Frame(parent)
        button_frame.grid(row=5, column=0, columnspan=2, pady=(5,0))

        self.connect_button = ttk.Button(button_frame, text="Connect", command=self._on_connect)
        self.connect_button.pack(side=tk.LEFT, padx=2)

        self.disconnect_button = ttk.Button(button_frame, text="Disconnect", command=self._on_disconnect)
        self.disconnect_button.pack(side=tk.LEFT, padx=2)
        self.disconnect_button.config(state=tk.DISABLED)

        # SAVE
        self.save_master_button = ttk.Button(parent, text="SAVE", command=self._on_save_master_settings)
        self.save_master_button.grid(row=6, column=0, columnspan=2, pady=(5,5))

    def _on_connect(self):
        """Actual logic to connect to hardware via a background thread."""
        com = self.com_port_var.get()
        baud_str = self.baud_rate_var.get()
        if not com:
            messagebox.showwarning("Warning", "Please select a COM port.")
            return
        try:
            baud = int(baud_str)
        except ValueError:
            messagebox.showwarning("Warning", f"Invalid baud rate: {baud_str}")
            return

        if self.serial_thread and self.serial_thread.running:
            messagebox.showinfo("Already Connected", "A serial connection is already active.")
            return

        # Start the serial thread
        self.serial_thread = SerialThread(com, baud, self)
        self.serial_thread.start()
        self.connected = True
        self.comm_status_label.config(text="Connected", foreground="green")
        messagebox.showinfo("Connect", f"Attempting connection on {com} at {baud} baud.")
        self.connect_button.config(state=tk.DISABLED)
        self.disconnect_button.config(state=tk.NORMAL)

    def _on_disconnect(self):
        """Stop the thread, close serial, etc."""
        if self.serial_thread:
            self.serial_thread.stop()
            self.serial_thread.join()
            self.serial_thread = None
        self.connected = False
        self.comm_status_label.config(text="Disconnected", foreground="red")
        messagebox.showinfo("Disconnect", "Disconnected from hardware.")
        self.connect_button.config(state=tk.NORMAL)
        self.disconnect_button.config(state=tk.DISABLED)

    def _on_save_master_settings(self):
        data_intv = self.data_interval_var.get()
        slave_to  = self.slave_timeout_var.get()
        addr_intv = self.address_assign_var.get()
        messagebox.showinfo(
            "Save Master Settings",
            f"Data Interval: {data_intv} ms\n"
            f"Slave Timeout: {slave_to} ms\n"
            f"Address Assign: {addr_intv} ms\n\n"
            "Settings saved! (Placeholder - send to device if needed.)"
        )

    # -----------------------------------------------------
    #   SLAVE LIST
    # -----------------------------------------------------
    def _create_slave_list(self, parent):
        self.slave_listbox = tk.Listbox(parent, selectmode=tk.EXTENDED, height=5)
        self.slave_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        scrollbar = ttk.Scrollbar(parent, orient=tk.VERTICAL, command=self.slave_listbox.yview)
        scrollbar.pack(side=tk.LEFT, fill=tk.Y, padx=2, pady=5)
        self.slave_listbox.config(yscrollcommand=scrollbar.set)

    # -----------------------------------------------------
    #   BATTERY & PROTECTION
    # -----------------------------------------------------
    def _create_battery_protection_settings(self, parent):
        # Battery Type
        ttk.Label(parent, text="Battery Type:").grid(row=0, column=0, sticky=tk.W, padx=2, pady=2)
        self.battery_type_var = tk.StringVar(value="Li-ion")
        battery_combo = ttk.Combobox(parent, textvariable=self.battery_type_var, values=["Li-ion","LFP"])
        battery_combo.grid(row=0, column=1, sticky=tk.W, padx=2, pady=2)

        # 100% SoC
        ttk.Label(parent, text="100% SoC (V):").grid(row=1, column=0, sticky=tk.W, padx=2, pady=2)
        self.soc_100_var = tk.StringVar(value="4.2")
        ttk.Entry(parent, textvariable=self.soc_100_var).grid(row=1, column=1, sticky=tk.W, padx=2, pady=2)

        # 0% SoC
        ttk.Label(parent, text="0% SoC (V):").grid(row=2, column=0, sticky=tk.W, padx=2, pady=2)
        self.soc_0_var = tk.StringVar(value="3.0")
        ttk.Entry(parent, textvariable=self.soc_0_var).grid(row=2, column=1, sticky=tk.W, padx=2, pady=2)

        # Max I_ch
        ttk.Label(parent, text="Max I_ch (A):").grid(row=3, column=0, sticky=tk.W, padx=2, pady=2)
        self.max_ch_var = tk.StringVar(value="5.0")
        ttk.Entry(parent, textvariable=self.max_ch_var).grid(row=3, column=1, sticky=tk.W, padx=2, pady=2)

        # Next column
        ttk.Label(parent, text="Max I_ds (A):").grid(row=0, column=2, sticky=tk.W, padx=2, pady=2)
        self.max_ds_var = tk.StringVar(value="5.0")
        ttk.Entry(parent, textvariable=self.max_ds_var).grid(row=0, column=3, sticky=tk.W, padx=2, pady=2)

        ttk.Label(parent, text="Chg Cut-off (V):").grid(row=1, column=2, sticky=tk.W, padx=2, pady=2)
        self.charge_cutoff_var = tk.StringVar(value="4.2")
        ttk.Entry(parent, textvariable=self.charge_cutoff_var).grid(row=1, column=3, sticky=tk.W, padx=2, pady=2)

        ttk.Label(parent, text="Dsch Cut-off (V):").grid(row=2, column=2, sticky=tk.W, padx=2, pady=2)
        self.discharge_cutoff_var = tk.StringVar(value="3.0")
        ttk.Entry(parent, textvariable=self.discharge_cutoff_var).grid(row=2, column=3, sticky=tk.W, padx=2, pady=2)

        ttk.Label(parent, text="Over Temp (°C):").grid(row=3, column=2, sticky=tk.W, padx=2, pady=2)
        self.over_temp_var = tk.StringVar(value="60")
        ttk.Entry(parent, textvariable=self.over_temp_var).grid(row=3, column=3, sticky=tk.W, padx=2, pady=2)

        # GET / SET
        get_btn = ttk.Button(parent, text="GET", command=self._on_get_settings)
        get_btn.grid(row=4, column=2, sticky=tk.E, padx=2, pady=5)

        set_btn = ttk.Button(parent, text="SET", command=self._on_set_settings)
        set_btn.grid(row=4, column=3, sticky=tk.W, padx=2, pady=5)

    def _on_get_settings(self):
        messagebox.showinfo("GET Settings", "Retrieve battery/protection settings from hardware (placeholder).")

    def _on_set_settings(self):
        messagebox.showinfo("SET Settings", "Apply battery/protection settings to hardware (placeholder).")

    # -----------------------------------------------------
    #   SWITCHING PATTERN
    # -----------------------------------------------------
    def _create_switching_pattern_section(self, parent):
        list_frame = ttk.Frame(parent)
        list_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=5, pady=5)

        self.pattern_listbox = tk.Listbox(list_frame, height=5)
        self.pattern_listbox.pack(side=tk.LEFT, fill=tk.Y)

        sb = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.pattern_listbox.yview)
        sb.pack(side=tk.LEFT, fill=tk.Y)
        self.pattern_listbox.config(yscrollcommand=sb.set)

        # Buttons
        btn_frame = ttk.Frame(parent)
        btn_frame.pack(side=tk.TOP, padx=5, pady=5)

        add_button = ttk.Button(btn_frame, text="ADD", command=self._on_add_pattern)
        add_button.grid(row=0, column=0, padx=2, pady=2)

        del_button = ttk.Button(btn_frame, text="DEL", command=self._on_del_pattern)
        del_button.grid(row=0, column=1, padx=2, pady=2)

        up_button = ttk.Button(btn_frame, text="UP", command=self._on_up_pattern)
        up_button.grid(row=0, column=2, padx=2, pady=2)

        down_button = ttk.Button(btn_frame, text="DOWN", command=self._on_down_pattern)
        down_button.grid(row=0, column=3, padx=2, pady=2)

        set_button = ttk.Button(btn_frame, text="SET", command=self._on_set_pattern)
        set_button.grid(row=0, column=4, padx=2, pady=2)

        # Edit
        edit_frame = ttk.Frame(parent)
        edit_frame.pack(side=tk.TOP, padx=5, pady=5)

        ttk.Label(edit_frame, text="Edit:").grid(row=0, column=0, sticky=tk.E, padx=2)
        self.pattern_edit_var = tk.StringVar()
        self.pattern_edit_entry = ttk.Entry(edit_frame, textvariable=self.pattern_edit_var, width=20)
        self.pattern_edit_entry.grid(row=0, column=1, padx=2)

        update_btn = ttk.Button(edit_frame, text="Update", command=self._on_update_pattern)
        update_btn.grid(row=0, column=2, padx=5)

    def _on_add_pattern(self):
        self.pattern_listbox.insert(tk.END, "New Pattern")

    def _on_del_pattern(self):
        sel = self.pattern_listbox.curselection()
        if sel:
            self.pattern_listbox.delete(sel[0])

    def _on_up_pattern(self):
        sel = self.pattern_listbox.curselection()
        if sel and sel[0] > 0:
            idx = sel[0]
            txt = self.pattern_listbox.get(idx)
            self.pattern_listbox.delete(idx)
            self.pattern_listbox.insert(idx-1, txt)
            self.pattern_listbox.selection_set(idx-1)

    def _on_down_pattern(self):
        sel = self.pattern_listbox.curselection()
        if sel and sel[0] < self.pattern_listbox.size()-1:
            idx = sel[0]
            txt = self.pattern_listbox.get(idx)
            self.pattern_listbox.delete(idx)
            self.pattern_listbox.insert(idx+1, txt)
            self.pattern_listbox.selection_set(idx+1)

    def _on_set_pattern(self):
        messagebox.showinfo("Switching Pattern", "Send pattern to hardware (placeholder).")

    def _on_update_pattern(self):
        sel = self.pattern_listbox.curselection()
        new_text = self.pattern_edit_var.get().strip()
        if sel and new_text:
            idx = sel[0]
            self.pattern_listbox.delete(idx)
            self.pattern_listbox.insert(idx, new_text)
            self.pattern_listbox.selection_set(idx)

    # --------------------------------------------------
    #   MIDDLE (PLOT)
    # --------------------------------------------------
    def _create_plot_section(self):
        self.plot_frame = ttk.Frame(self)
        self.plot_frame.grid(row=2, column=0, sticky="nsew", padx=5, pady=5)

        self.plot_frame.columnconfigure(0, weight=1)
        self.plot_frame.rowconfigure(1, weight=1)

        # Checkboxes row
        checkbox_frame = ttk.LabelFrame(self.plot_frame, text="Data to Plot", style="Bold.TLabelframe")
        checkbox_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=5)

        self.data_var_vbat = tk.BooleanVar(value=True)
        self.data_var_ibat = tk.BooleanVar(value=False)
        self.data_var_soc  = tk.BooleanVar(value=False)
        self.data_var_temp = tk.BooleanVar(value=False)
        self.data_var_vter = tk.BooleanVar(value=False)
        self.data_var_ibal = tk.BooleanVar(value=False)

        ttk.Checkbutton(checkbox_frame, text="VBat (V)",   variable=self.data_var_vbat).pack(side=tk.LEFT, padx=5)
        ttk.Checkbutton(checkbox_frame, text="IBat (V)",   variable=self.data_var_ibat).pack(side=tk.LEFT, padx=5)
        ttk.Checkbutton(checkbox_frame, text="SoC (%)",    variable=self.data_var_soc ).pack(side=tk.LEFT, padx=5)
        ttk.Checkbutton(checkbox_frame, text="T (°C)",     variable=self.data_var_temp).pack(side=tk.LEFT, padx=5)
        ttk.Checkbutton(checkbox_frame, text="VTer (V)",   variable=self.data_var_vter).pack(side=tk.LEFT, padx=5)
        ttk.Checkbutton(checkbox_frame, text="IBAL (A)",   variable=self.data_var_ibal).pack(side=tk.LEFT, padx=5)

        # Plot area
        plot_area = ttk.Frame(self.plot_frame)
        plot_area.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        plot_area.columnconfigure(0, weight=1)
        plot_area.rowconfigure(0, weight=1)

        self.fig = Figure(figsize=(5, 3), dpi=100)
        self.ax = self.fig.add_subplot(111)
        self.ax.set_title("Real-time Data")
        self.ax.set_xlabel("Time (s)")
        self.ax.set_ylabel("Value")

        self.canvas = FigureCanvasTkAgg(self.fig, master=plot_area)
        self.canvas.get_tk_widget().grid(row=0, column=0, sticky="nsew")

        # Recording controls
        record_frame = ttk.Frame(self.plot_frame)
        record_frame.grid(row=2, column=0, sticky="ew", padx=5, pady=5)

        self.record_button = ttk.Button(record_frame, text="Start Recording", command=self._on_start_recording)
        self.record_button.pack(side=tk.LEFT, padx=5)

        self.stop_button = ttk.Button(record_frame, text="Stop Recording", command=self._on_stop_recording)
        self.stop_button.pack(side=tk.LEFT, padx=5)

        self.reset_button = ttk.Button(record_frame, text="Reset", command=self._on_reset_plot)
        self.reset_button.pack(side=tk.LEFT, padx=5)

    def _on_start_recording(self):
        if self.recording:
            messagebox.showinfo("Already Recording", "Recording is already in progress.")
            return
        # Let user choose a directory (or a single CSV file).
        # If you want a folder for each slave, adapt as needed.
        folder = filedialog.askdirectory(title="Select Directory for CSV Files")
        if not folder:
            return
        self.csv_file_path = folder
        self.recording = True
        self.record_status_label.config(text="Recording", foreground="green")
        messagebox.showinfo("Recording", f"Recording started. CSV files will be saved in:\n{folder}")
        self.start_time = None  # Will set on first data arrival

    def _on_stop_recording(self):
        if not self.recording:
            messagebox.showinfo("Not Recording", "No recording in progress.")
            return
        self.recording = False
        self.record_status_label.config(text="Stopped", foreground="red")
        # Close all CSV files
        for addr, f in self.csv_files.items():
            f.close()
        self.csv_files.clear()
        self.csv_writers.clear()
        self.start_time = None
        messagebox.showinfo("Recording", "Stopped recording. CSV files have been saved.")

    def _on_reset_plot(self):
        self.graph_data.clear()
        self.ax.clear()
        self.ax.set_title("Real-time Data")
        self.ax.set_xlabel("Time (s)")
        self.ax.set_ylabel("Value")
        self.canvas.draw()

    # --------------------------------------------------
    #   BOTTOM SECTION
    # --------------------------------------------------
    def _create_bottom_section(self):
        bottom_frame = ttk.Frame(self)
        bottom_frame.grid(row=3, column=0, sticky="ew", padx=5, pady=5)

        faults_frame = ttk.LabelFrame(bottom_frame, text="Faults Reports", style="Bold.TLabelframe")
        faults_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

        self.faults_text = tk.Text(faults_frame, height=5, width=40)
        self.faults_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        faults_scrollbar = ttk.Scrollbar(faults_frame, orient=tk.VERTICAL, command=self.faults_text.yview)
        faults_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.faults_text.config(yscrollcommand=faults_scrollbar.set)

        # Status
        status_frame = ttk.LabelFrame(bottom_frame, text="Status Indicators", style="Bold.TLabelframe")
        status_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5)

        ttk.Label(status_frame, text="Master Comm:", style="Bold.TLabel").grid(row=0, column=0, sticky=tk.W, pady=3)
        self.comm_status_label = ttk.Label(status_frame, text="Disconnected", foreground="red")
        self.comm_status_label.grid(row=0, column=1, sticky=tk.W, pady=3)

        ttk.Label(status_frame, text="Fault Status:", style="Bold.TLabel").grid(row=1, column=0, sticky=tk.W, pady=3)
        self.fault_status_label = ttk.Label(status_frame, text="No Fault", foreground="green")
        self.fault_status_label.grid(row=1, column=1, sticky=tk.W, pady=3)

        ttk.Label(status_frame, text="Recording:", style="Bold.TLabel").grid(row=2, column=0, sticky=tk.W, pady=3)
        self.record_status_label = ttk.Label(status_frame, text="Stopped", foreground="red")
        self.record_status_label.grid(row=2, column=1, sticky=tk.W, pady=3)

        # ABOUT / HELP / EXIT
        app_buttons_frame = ttk.Frame(bottom_frame)
        app_buttons_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5)

        about_button = ttk.Button(app_buttons_frame, text="ABOUT", command=self._show_about)
        about_button.pack(pady=2, fill=tk.X)

        help_button = ttk.Button(app_buttons_frame, text="HELP", command=self._show_help)
        help_button.pack(pady=2, fill=tk.X)

        exit_button = ttk.Button(app_buttons_frame, text="EXIT", command=self._exit_app)
        exit_button.pack(pady=2, fill=tk.X)

    # --------------------------------------------------
    #   Real-Time Plot / Timeout
    # --------------------------------------------------
    def _update_plot(self):
        """Periodically update the plot with any new data."""
        self.ax.clear()
        self.ax.set_title("Real-time Data")
        self.ax.set_xlabel("Time (s)")
        self.ax.set_ylabel("Value")

        # For each slave in graph_data
        for addr, series in self.graph_data.items():
            t_data = series.get("time", [])
            if not t_data:
                continue

            # Plot selected checkboxes
            if self.data_var_vbat.get():
                volt = series.get("Voltage", [])
                if volt:
                    self.ax.plot(t_data, volt, label=f"{addr} VBat")

            if self.data_var_ibat.get():
                curr = series.get("Current", [])
                if curr:
                    self.ax.plot(t_data, curr, label=f"{addr} IBat")

            if self.data_var_soc.get():
                soc = series.get("SoC", [])
                if soc:
                    self.ax.plot(t_data, soc, label=f"{addr} SoC")

            if self.data_var_temp.get():
                temp = series.get("Temp", [])
                if temp:
                    self.ax.plot(t_data, temp, label=f"{addr} Temp")

            if self.data_var_vter.get():
                vter = series.get("Terminal Voltage", [])
                if vter:
                    self.ax.plot(t_data, vter, label=f"{addr} VTer")

            if self.data_var_ibal.get():
                ibal = series.get("Balance Current", [])
                if ibal:
                    self.ax.plot(t_data, ibal, label=f"{addr} IBAL")

        self.ax.legend()
        self.canvas.draw()

        # Schedule next update
        self.after(500, self._update_plot)

    # Called by SerialThread when we get new data
    def receive_data(self, data_dict):
        """
        data_dict might look like:
          {
            "address": "0x01",
            "Voltage": "3.40 V",
            "Current": "0.00 A",
            "SoC": "78.0 %",
            "Temp": "25.0 C",
            "Faults Reg": "00000000",
            "Vcc": "3.3 V",
            "Balance Current": "0.0 A",
            "Terminal Voltage": "3.40 V"
          }
        """
        addr = data_dict.get("address","Unknown").strip()
        if addr == "Unknown":
            return

        # Add to slave_listbox if not present
        existing = self.slave_listbox.get(0, tk.END)
        if addr not in existing:
            self.slave_listbox.insert(tk.END, addr)

        # Initialize if needed
        if addr not in self.graph_data:
            self.graph_data[addr] = {
                "time": [],
                "Voltage": [],
                "Current": [],
                "SoC": [],
                "Temp": [],
                "Faults Reg": [],
                "Vcc": [],
                "Balance Current": [],
                "Terminal Voltage": []
            }

        # Compute time
        if self.recording and self.start_time is None:
            self.start_time = time.time()
        if self.recording and self.start_time:
            elapsed = time.time() - self.start_time
        else:
            # or just increment by 0.5 each time
            elapsed = len(self.graph_data[addr]["time"]) * 0.5

        self.graph_data[addr]["time"].append(elapsed)

        # Convert fields
        def parse_float(s, unit=None):
            if unit and s.endswith(unit):
                s = s.replace(unit, "").strip()
            try:
                return float(s)
            except:
                return 0.0

        volt_str = data_dict.get("Voltage","0")
        curr_str = data_dict.get("Current","0")
        soc_str  = data_dict.get("SoC","0")
        temp_str = data_dict.get("Temp","0")
        fault_reg= data_dict.get("Faults Reg","0")
        vcc_str  = data_dict.get("Vcc","0")
        bal_str  = data_dict.get("Balance Current","0")
        term_str = data_dict.get("Terminal Voltage","0")

        # Remove typical units
        voltage = parse_float(volt_str, "V")
        current = parse_float(curr_str, "A")
        soc     = parse_float(soc_str, "%")
        temp    = parse_float(temp_str, "C")
        vcc     = parse_float(vcc_str, "V")
        bal     = parse_float(bal_str, "A")
        term    = parse_float(term_str, "V")

        self.graph_data[addr]["Voltage"].append(voltage)
        self.graph_data[addr]["Current"].append(current)
        self.graph_data[addr]["SoC"].append(soc)
        self.graph_data[addr]["Temp"].append(temp)
        self.graph_data[addr]["Faults Reg"].append(fault_reg)
        self.graph_data[addr]["Vcc"].append(vcc)
        self.graph_data[addr]["Balance Current"].append(bal)
        self.graph_data[addr]["Terminal Voltage"].append(term)

        # If you want to show faults in the bottom text box:
        if fault_reg not in ["0","00000000"]:
            self.faults_text.insert(tk.END, f"Slave {addr} Fault: {fault_reg}\n")
        self.faults_text.see(tk.END)

        # Recording => CSV
        if self.recording and self.csv_file_path:
            if addr not in self.csv_files:
                # Create a new CSV
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                file_path = os.path.join(self.csv_file_path, f"Data_{timestamp}_{addr}.csv")
                f = open(file_path, "w", newline="")
                writer = csv.writer(f)
                writer.writerow([
                    "Time(s)","Voltage(V)","Current(A)","SoC(%)","Temp(C)",
                    "FaultsReg","Vcc(V)","Bal(A)","Term(V)"
                ])
                self.csv_files[addr] = f
                self.csv_writers[addr] = writer

            row = [
                f"{elapsed:.2f}", voltage, current, soc, temp,
                fault_reg, vcc, bal, term
            ]
            self.csv_writers[addr].writerow(row)

    # --------------------------------------------------
    #   TIMEOUT CHECK
    # --------------------------------------------------
    def check_slave_timeout(self):
        """Remove slaves that haven’t sent data in > slave_timeout_s seconds."""
        if self.serial_thread:
            now = time.time()
            for addr, last_seen in list(self.serial_thread.slave_last_seen.items()):
                if (now - last_seen) > self.slave_timeout_s:
                    # Remove from list
                    self.serial_thread.slave_last_seen.pop(addr)
                    # Remove from the listbox
                    index_to_remove = None
                    for i in range(self.slave_listbox.size()):
                        if self.slave_listbox.get(i) == addr:
                            index_to_remove = i
                            break
                    if index_to_remove is not None:
                        self.slave_listbox.delete(index_to_remove)
                    # Remove from graph data
                    self.graph_data.pop(addr, None)
                    # Maybe log a message
                    self.faults_text.insert(tk.END, f"Slave {addr} timed out.\n")
                    self.faults_text.see(tk.END)

        self.after(1000, self.check_slave_timeout)

    # --------------------------------------------------
    #   ABOUT / HELP / EXIT
    # --------------------------------------------------
    def _show_about(self):
        messagebox.showinfo(
            "ABOUT",
            "Developed by Walid Issa\nYear 2025\nVersion V1"
        )

    def _show_help(self):
        messagebox.showinfo("HELP", "Opening Help.pdf (placeholder).")
        # On Windows:
        # os.startfile("Help.pdf")
        # Cross-platform:
        # import subprocess
        # subprocess.run(["xdg-open", "Help.pdf"])

    def _exit_app(self):
        self.destroy()

    def report_fault(self, msg):
        """Used by the serial thread to show errors in the GUI."""
        self.faults_text.insert(tk.END, f"FAULT: {msg}\n")
        self.faults_text.see(tk.END)

    def destroy(self):
        # Clean up the serial thread
        if self.serial_thread:
            self.serial_thread.stop()
            self.serial_thread.join()
        # Close CSVs
        for f in self.csv_files.values():
            f.close()
        self.csv_files.clear()
        self.csv_writers.clear()
        super().destroy()


if __name__ == "__main__":
    app = BmsApplication()
    app.mainloop()
